package com.vulnerabilityfixer.fixer;

import java.io.*;
import java.util.Locale;
import javax.xml.parsers.*;

import com.vulnerabilityfixer.bugs.BugInstance;
import com.vulnerabilityfixer.bugs.SQLiBug;
import com.vulnerabilityfixer.factories.BugCreator;
import org.w3c.dom.*;
import org.xml.sax.SAXException;

public class XmlParser
{
    private static String FILENAME;

    public static void parseXml(String xmlFile) throws ParserConfigurationException,
            IOException, SAXException
    {
        FILENAME = xmlFile;
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();

        Document document = builder.parse(new File(FILENAME));

        Element root = document.getDocumentElement();
       // System.out.println("ROOT" + root.getNodeName());

        BugInstance bug;

        NodeList nList = document.getElementsByTagName("BugInstance");
        for(int i=0; i<nList.getLength(); i++)
        {
            //for every bugInstance find a sourceLine
            Node node = nList.item(i);
            if(node.getNodeType() == Node.ELEMENT_NODE)
            {
                Element element = (Element) node;
                if(!element.getAttribute("type")
                        .equalsIgnoreCase("SQL_INJECTION_JPA"))
                {
                    continue;
                }

                Node sourceLine = element.getElementsByTagName("SourceLine").item(0);

                Element sourceL = (Element) sourceLine;
                //populate the details of bug.
                bug = BugCreator.getBug(bugType());

                bug.setSourceClassName(sourceL.getAttribute("classname"));
                bug.setStartLine(Integer.parseInt(sourceL.getAttribute("start")));
                bug.setEndLine(Integer.parseInt(sourceL.getAttribute("end")));
                bug.setSourceFileName(sourceL.getAttribute("sourcefile"));
                bug.setSourceFilePath(sourceL.getAttribute("sourcepath"));
                bug.setPackageName();

                Fixer.fix(bug);
            }
        }
    }

    private static String bugType()
    {
        switch (FILENAME)
        {
            case "../sqlibugs.xml": return "sqli";
            case "../xssbugs.xml": return "xss";
            case "../test.xml": return "sqli";
            default: return null;
        }
    }
}
